image: "registry.stensuldev.net/dockerfiles/web-2.0.0:2.2.0"

services:
  - mongo:latest

variables:
  APP_NAME: "Base"
  APP_BASE_URL: "http://localhost:3000"

cache:
  paths:
    - vendor/
    - node_modules/
    - public/
    - ci/vendor/
    - composer.phar
    - security-checker.phar

stages:
  - build
  - test
  - deploy

before_script:
  # js related
  - yum install cairo cairo-devel
  - npm install
  # Install composer dependencies
  - wget https://composer.github.io/installer.sig -O - -q | tr -d '\n' > installer.sig
  - php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
  - php -r "if (hash_file('SHA384', 'composer-setup.php') === file_get_contents('installer.sig')) { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
  - php composer-setup.php
  - php -r "unlink('composer-setup.php'); unlink('installer.sig');"
  - php composer.phar install
  - npm run production
  # Install CI components.
  - cd ci/; php ../composer.phar install; cd ..

test_composer_vulnerabilities:
  stage: test
  script:
    - wget http://get.sensiolabs.org/security-checker.phar
    - php security-checker.phar security:check composer.lock

phpunit:
  stage: test
  script:
    # Enable xdebug for code coverage
    - yum install php70-php-pecl-xdebug.x86_64 -y
    - ln -s /opt/remi/php70/root/usr/lib64/php/modules/xdebug.so /usr/lib64/php/modules/xdebug.so
    - cp /etc/opt/remi/php70/php.d/15-xdebug.ini /etc/php.d/
    # Run phpunit with code coverage report enbled.
    - vendor/bin/phpunit --coverage-html ci/storage/tmp/be_coverage/ --colors=never
  artifacts:
    when: always
    name: "${CI_JOB_STAGE}_phpunit_${CI_COMMIT_REF_NAME}"
    expire_in: 30 days
    paths:
      - ci/storage/tmp/be_coverage/

phpmd:
  stage: test
  script:
    # Run php mess detector
    - ci/vendor/bin/phpmd . html ci/rulesets/md_codesize.xml,ci/rulesets/md_design.xml,ci/rulesets/md_naming.xml,unusedcode
      --exclude vendor,database,node_modules,resources,ci > ci/storage/tmp/phpmd.html
  artifacts:
    when: always
    name: "${CI_JOB_STAGE}_phpmd_${CI_COMMIT_REF_NAME}"
    expire_in: 30 days
    paths:
      - ci/storage/tmp/phpmd.html

phpcs:
  stage: test
  script:
    # Run php code sniffer
    - ci/vendor/bin/phpcs --standard=psr2 app/ config/ routes/ tests/ --report=full,gitblame
      --extensions=php --runtime-set ignore_warnings_on_exit true > ci/storage/tmp/phpcs.txt
  artifacts:
    when: always
    name: "${CI_JOB_STAGE}_phpcs_${CI_COMMIT_REF_NAME}"
    expire_in: 30 days
    paths:
      - ci/storage/tmp/phpcs.txt

phpcpd:
  stage: test
  script:
    # Run php copy/paste detector
    - ci/vendor/bin/phpcpd . --exclude=vendor --exclude=node_modules --exclude=storage
      --exclude=tmp --exclude ci > ci/storage/tmp/phpcpd.txt
  artifacts:
    when: always
    name: "${CI_JOB_STAGE}_phpcpd_${CI_COMMIT_REF_NAME}"
    expire_in: 30 days
    paths:
      - ci/storage/tmp/phpcpd.txt

phplint:
  stage: test
  script:
    # Run php parallel lint
    - ci/vendor/bin/parallel-lint --no-colors --blame . --exclude vendor --exclude node_modules
      --exclude storage --exclude tmp --exclude ci > ci/storage/tmp/phplint.txt
  artifacts:
    when: always
    name: "${CI_JOB_STAGE}_phplint_${CI_COMMIT_REF_NAME}"
    expire_in: 30 days
    paths:
      - ci/storage/tmp/phplint.txt

phpdoccheck:
  stage: test
  script:
    # Run php doc check
    - ci/vendor/bin/phpdoccheck --exclude=vendor,node_modules,ci,tmp,storage --no-ansi
      --skip-classes -w > ci/storage/tmp/doccheck.txt
  artifacts:
    when: always
    name: "${CI_JOB_STAGE}_phpdoccheck_${CI_COMMIT_REF_NAME}"
    expire_in: 30 days
    paths:
      - ci/storage/tmp/doccheck.txt

test_js:
  stage: test
  script:
    - npm run test:single
  artifacts:
    when: always
    name: "${CI_JOB_STAGE}_testjs_${CI_COMMIT_REF_NAME}"
    expire_in: 30 days
    paths:
      - coverage/

eslint:
  stage: test
  script:
    # Run eslint
    - ./node_modules/eslint/bin/eslint.js resources/assets/js/ resources/views/modules/
      -o ci/storage/tmp/eslint.html --no-color -f html
  artifacts:
    when: always
    name: "${CI_JOB_STAGE}_eslint_${CI_COMMIT_REF_NAME}"
    expire_in: 30 days
    paths:
      - ci/storage/tmp/eslint.html

stylelint:
  stage: test
  script:
    # Run stylelint
    - ./node_modules/stylelint/bin/stylelint.js resources/assets/less/**/*.less > ci/storage/tmp/stylelint.txt
      --no-color -f verbose
  artifacts:
    when: always
    name: "${CI_JOB_STAGE}_stylelint_${CI_COMMIT_REF_NAME}"
    expire_in: 30 days
    paths:
      - ci/storage/tmp/stylelint.txt